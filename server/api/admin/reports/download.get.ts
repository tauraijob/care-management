import { getUserFromToken, extractTokenFromRequest } from '~/server/utils/auth'
import { prisma } from '~/server/utils/prisma'
import { PDFDocument, rgb, StandardFonts } from 'pdf-lib'

export default defineEventHandler(async (event) => {
    try {
        const token = extractTokenFromRequest(event)
        if (!token) throw createError({ statusCode: 401, statusMessage: 'No token provided' })
        const user = await getUserFromToken(token)
        if (!user || user.role !== 'ADMIN') throw createError({ statusCode: 403, statusMessage: 'Admin access required' })

        const query = getQuery(event)
        const id = query.id
        if (!id) throw createError({ statusCode: 400, statusMessage: 'Missing report id' })

        // Fetch report from database
        const report = await prisma.report.findUnique({
            where: { id: id as string },
            include: {
                generator: {
                    select: {
                        firstName: true,
                        lastName: true
                    }
                }
            }
        })

        if (!report) {
            throw createError({ statusCode: 404, statusMessage: 'Report not found' })
        }

        // Create PDF document
        const pdfDoc = await PDFDocument.create()
        let page = pdfDoc.addPage([595.28, 841.89]) // A4 size
        const { width, height } = page.getSize()

        // Embed fonts
        const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)
        const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold)

        // Set up margins and spacing
        const margin = 50
        const lineHeight = 20
        let yPosition = height - margin

        // Add header
        page.drawText('LUCERNA HEALTH CARE', {
            x: margin,
            y: yPosition,
            size: 24,
            font: helveticaBold,
            color: rgb(0.2, 0.4, 0.8)
        })
        yPosition -= 40

        page.drawText('REPORT', {
            x: margin,
            y: yPosition,
            size: 18,
            font: helveticaBold,
            color: rgb(0.2, 0.2, 0.2)
        })
        yPosition -= 30

        // Add report details
        const details = [
            `Report Name: ${report.name}`,
            `Generated: ${report.generatedAt.toLocaleDateString()}`,
            `Date Range: ${report.dateRange}`,
            `Generated by: ${report.generator.firstName} ${report.generator.lastName}`,
            `Status: ${report.status}`,
            `Type: ${report.type.replace(/_/g, ' ')}`
        ]

        details.forEach(detail => {
            page.drawText(detail, {
                x: margin,
                y: yPosition,
                size: 12,
                font: helveticaFont,
                color: rgb(0.2, 0.2, 0.2)
            })
            yPosition -= lineHeight
        })

        yPosition -= 20

        // Add report content based on type
        if (report.content) {
            page.drawText('REPORT DATA:', {
                x: margin,
                y: yPosition,
                size: 14,
                font: helveticaBold,
                color: rgb(0.2, 0.2, 0.2)
            })
            yPosition -= 25

            const content = report.content as any

            switch (report.type) {
                case 'BOOKING_SUMMARY':
                    page.drawText(`Total Bookings: ${content.totalBookings || 0}`, {
                        x: margin,
                        y: yPosition,
                        size: 12,
                        font: helveticaBold,
                        color: rgb(0.2, 0.2, 0.2)
                    })
                    yPosition -= 20

                    if (content.bookings && content.bookings.length > 0) {
                        page.drawText('Bookings:', {
                            x: margin,
                            y: yPosition,
                            size: 12,
                            font: helveticaBold,
                            color: rgb(0.2, 0.2, 0.2)
                        })
                        yPosition -= 20

                        content.bookings.forEach((booking: any, index: number) => {
                            if (yPosition < margin + 100) {
                                page = pdfDoc.addPage([595.28, 841.89])
                                yPosition = height - margin
                            }

                            const bookingText = [
                                `Booking ${index + 1}:`,
                                `  Client: ${booking.client}`,
                                `  Carer: ${booking.carer}`,
                                `  Patient: ${booking.patient}`,
                                `  Status: ${booking.status}`,
                                `  Care Type: ${booking.careType}`,
                                `  Start Date: ${new Date(booking.startDate).toLocaleDateString()}`
                            ]

                            bookingText.forEach(line => {
                                page.drawText(line, {
                                    x: margin + 10,
                                    y: yPosition,
                                    size: 10,
                                    font: helveticaFont,
                                    color: rgb(0.3, 0.3, 0.3)
                                })
                                yPosition -= 15
                            })
                            yPosition -= 10
                        })
                    }
                    break

                case 'REVENUE_ANALYSIS':
                    page.drawText(`Total Revenue: R${content.totalRevenue?.toFixed(2) || '0.00'}`, {
                        x: margin,
                        y: yPosition,
                        size: 12,
                        font: helveticaBold,
                        color: rgb(0.2, 0.2, 0.2)
                    })
                    yPosition -= 20

                    page.drawText(`Total Payments: ${content.totalPayments || 0}`, {
                        x: margin,
                        y: yPosition,
                        size: 12,
                        font: helveticaBold,
                        color: rgb(0.2, 0.2, 0.2)
                    })
                    yPosition -= 25

                    if (content.payments && content.payments.length > 0) {
                        page.drawText('Payments:', {
                            x: margin,
                            y: yPosition,
                            size: 12,
                            font: helveticaBold,
                            color: rgb(0.2, 0.2, 0.2)
                        })
                        yPosition -= 20

                        content.payments.forEach((payment: any, index: number) => {
                            if (yPosition < margin + 100) {
                                page = pdfDoc.addPage([595.28, 841.89])
                                yPosition = height - margin
                            }

                            const paymentText = [
                                `Payment ${index + 1}:`,
                                `  Amount: R${payment.amount?.toFixed(2)}`,
                                `  Client: ${payment.client}`,
                                `  Method: ${payment.method}`,
                                `  Date: ${new Date(payment.date).toLocaleDateString()}`
                            ]

                            paymentText.forEach(line => {
                                page.drawText(line, {
                                    x: margin + 10,
                                    y: yPosition,
                                    size: 10,
                                    font: helveticaFont,
                                    color: rgb(0.3, 0.3, 0.3)
                                })
                                yPosition -= 15
                            })
                            yPosition -= 10
                        })
                    }
                    break

                case 'CARER_PERFORMANCE':
                    page.drawText(`Total Logs: ${content.totalLogs || 0}`, {
                        x: margin,
                        y: yPosition,
                        size: 12,
                        font: helveticaBold,
                        color: rgb(0.2, 0.2, 0.2)
                    })
                    yPosition -= 25

                    if (content.logs && content.logs.length > 0) {
                        page.drawText('Care Logs:', {
                            x: margin,
                            y: yPosition,
                            size: 12,
                            font: helveticaBold,
                            color: rgb(0.2, 0.2, 0.2)
                        })
                        yPosition -= 20

                        content.logs.forEach((log: any, index: number) => {
                            if (yPosition < margin + 100) {
                                page = pdfDoc.addPage([595.28, 841.89])
                                yPosition = height - margin
                            }

                            const logText = [
                                `Log ${index + 1}:`,
                                `  Carer: ${log.carer}`,
                                `  Patient: ${log.patient}`,
                                `  Visit Start: ${log.visitStart ? new Date(log.visitStart).toLocaleString() : 'N/A'}`,
                                `  Visit End: ${log.visitEnd ? new Date(log.visitEnd).toLocaleString() : 'N/A'}`,
                                `  Notes: ${log.notes || 'No notes'}`
                            ]

                            logText.forEach(line => {
                                page.drawText(line, {
                                    x: margin + 10,
                                    y: yPosition,
                                    size: 10,
                                    font: helveticaFont,
                                    color: rgb(0.3, 0.3, 0.3)
                                })
                                yPosition -= 15
                            })
                            yPosition -= 10
                        })
                    }
                    break

                default:
                    page.drawText('Report data available in JSON format', {
                        x: margin,
                        y: yPosition,
                        size: 12,
                        font: helveticaFont,
                        color: rgb(0.5, 0.5, 0.5)
                    })
            }
        }

        // Add footer
        const lastPage = pdfDoc.getPages()[pdfDoc.getPages().length - 1]
        lastPage.drawText(`Generated on ${new Date().toLocaleString()}`, {
            x: margin,
            y: 30,
            size: 10,
            font: helveticaFont,
            color: rgb(0.5, 0.5, 0.5)
        })

        // Serialize PDF
        const pdfBytes = await pdfDoc.save()

        // Set response headers for PDF download
        setHeader(event, 'Content-Type', 'application/pdf')
        setHeader(event, 'Content-Disposition', `attachment; filename="${report.name.replace(/[^a-zA-Z0-9]/g, '_')}.pdf"`)

        return pdfBytes
    } catch (e) {
        throw createError({ statusCode: 500, statusMessage: e.message })
    }
})